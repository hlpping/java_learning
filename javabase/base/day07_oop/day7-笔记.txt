* 一.子类对象的初始化
	1.创建子类对象
		在创建子类对象时, 默认会调用父类无参的构造函数.
		因为子类可以当做父类来用, 父类有的功能子类都有, 如果父类在构造函数中做了一些工作, 创建父类对象时就可以完成这些工作, 那么子类也应具有此功能.
		在创建子类对象的时候, 其实是先创建了一个父类对象, 在创建父类对象的时候, 就需要调用到父类的构造函数.
	2.调用父类构造函数
		子类在创建对象的时候, 一定会调用一次父类的构造函数, 因为需要创建父类对象.
		如果不显式的调用, 默认在构造函数中会有一行super(), 调用父类无参的.
		我们也可以使用super()传入参数, 调用父类有参的构造函数.
		super()和this()一样, 都是只能在构造函数的第一个语句出现. 
		所有构造函数的第一个语句要么是this(), 要么是super(), 如果不写, 默认是super()
		
* 二.覆盖父类方法
	1.重写(Override)和重载(Overload)的区别:
		他们的共同点是方法名相同.
		重载是方法名相同, 参数列表不同, 和返回值类型无关.
		重写是方法名相同, 参数列表相同, 返回值类型也相同(子类返回值类型是父类返回值类型的子类也可以).
	2.重写时的注意
		子类覆盖父类的方法时, 不能比父类的访问权限更弱.
		子类覆盖父类的方法时, 不能比父类抛出更多的异常
		因为父类有的功能子类都要有, 所以子类只能比父类强, 不能比父类弱.
	3.调用被覆盖的方法
		如果想调用被父类被覆盖的方法, 可以使用super.方法名

四.Object类中的方法
	1.finalize()
		此方法在对象销毁之前执行
	2.toString()
		此方法可以将对象转为字符串表示形式.
		Object类中默认是转为 类名@地址
		如果我们自定义的类不想转为此种格式, 可以重写toString().
		在使用 System.out.println(); 方法时, 如果传入的实参是一个对象, 那么打印的就是对象的toString()方法的返回值.
	* 3.equals()
		在程序中我们经常会对一些对象进行比较, 这时我们通常会以对象的属性来做比较, 如果两个对象的所有属性都相同, 我们就认为他们相同.
		以后在自己写一个类的时候, 最好重写一个equals方法, 这样别人就可以使用equals方法来比较两个对象的属性了.
		如果以后我们要比较两个对象, 就使用equals方法. java写好的类都会重写equals方法. 那么我们自己写的类最好也重写这个方法.
		* 以后写类时写equals方法, 比较对象时调用equals方法.
	4.注解
		为了检查覆盖是否成功, 我们在覆盖父类的方法时可以使用 @Override 来测试.
		
五.多态
	1.以不变应万变
		定义一个方法的时候, 将形参定义为父类类型, 以后所有子类对象都可以传入.
		根据传入的实参类型不同, 运行的结果也就不同.
	2.向后兼容
		将形参定义为父类对象, 而不是具体制定某一子类.
		这样以后如果新定义一个类, 只要继承于指定的父类就可以传入.
		先写的代码可以调用后写的代码.
	* 以后写方法时, 形参尽量定义成父类类型, 这样可以让更多对象传入.
	
六.抽象类
	1.什么是抽象类
		使用abstract修饰的类就是抽象类, 抽象类不能被实例化.
		使用abstract修饰的方法就是抽象方法, 抽象方法没有方法体, 如果一个类中有抽象方法, 必须声明为抽象类.
		没有抽象方法的类, 也可以声明为抽象类. 在GUI的Adapter中有使用.
			如果将构造函数private, 也可以阻止别人创建对象. private是对外不可见, 类内部可以用.
	2.什么时候用抽象类
		当我们定义的多个类有相同的方法声明时, 就可以抽象到父类中定义.
		这时别人看到我们的父类的抽象方法, 就知道所有子类中都会有这个方法.
		
七.final
	1.final类
		最终的类, 不能被继承
	2.final方法
		最终的方法, 不能被覆盖
	3.final变量
		最终的变量, 只能赋值一次. 注意基本数据类型和引用数据类型的区别, final变量是指变量中存的内容不能被改变.
	4.全局常量
		使用public static final修饰的常量是全局常量, 一般全部大写.
		
八.单态(例)设计模式
	1.什么是设计模式
		在编程的过程中, 经常遇到的一些问题, 经过前人的理论总结和实践经验, 优选出的一些代码, 类似于棋谱和公式.
	2.什么是单态设计模式
		如果一个类在整个程序中只能有一个实例, 那么这种情况, 就可以使用单态设计模式.
	3.单态设计模式的写法
		a).私有化构造函数, 类外部不能创建对象.
		b).在类内部创建一个对象, 定义一个该类类型的成员变量引用这个对象.
		c).定义一个公有的方法, 让别人可以获取到这个唯一的对象.

* 九.组合设计模式
	1.什么时候用组合
		在定义一个类的时候, 需要使用另一个类的方法, 就可以使用组合设计模式.
	2.实现步骤
		a).先定义一个需要类的类型的成员变量
		b).通过构造函数将一个这个类型的对象组合进来
		c).在需要使用这个类的方法时, 通过属性调用方法
	3.组合设计模式和继承的区别
		有的时候一个类需要另一个类的方法, 这两个类又没有逻辑上的继承关系, 就不适合用继承, 可以用组合.
		由于Java只支持单继承, 在使用别的类的方法时如果用继承的方式, 那么这个类就无法再继承其他类了, 而组合设计模式就没有这个缺点.
		
	
十.模板设计模式
	1.什么时候用模板设计模式
		在做一件事的时候, 需要先定义一个模板, 以后执行时按照模板定义的步骤去做.
	2.实现方式
		先定义一个抽象类作为模板
		在类中定义抽象方法, 每一个方法是一个步骤
		再定义一个供外界调用的主方法, 这个方法中调用抽象方法完成每一个步骤. 
		这个主方法使用final修饰, 不能修改.
		
		
思考题:
	有一个农场, 农场里有两头牛, 牛每三年生两头小牛. 牛的寿命是10年. 
	问: 20年后农场中有多少牛. 
	写程序设计一个方法, 计算N年后农场有多少头牛.
	
	main(){
		创建2头牛, 放入farm
		
		循环20次. 每次让farm中的所有牛长大1岁
	}
	
	class Cattle{
		int age
		static Cattle[] farm = new Cattle[1000];
		
		void growUp(){
			判断年龄, 如果是3的倍数
				就创建新牛, 添到farm中
			判断年龄, 如果等于10
				就从farm中将自己移出
		}
	}
	
	1	2
	2	2
	3	4
	4	4
	5	4
	6	8
	7	8
	8	8
	9	16
	10	14
	11	14
	12	28
	13	26
	14	26
	15	52
	16	48
	17	48
	18	96
	19	88
	20	88
	
		
		
报错提示
	OverrideDemo.java:36: run() in Student cannot override run() in Person; attempting to use incompatible return type
	found   : int
	required: void
	        int run(){
	36行: Student类中的run()不能覆盖Person类中的run(); 正在企图用一个矛盾的返回值类型. 找到int, 需要void
	
	
	OverrideDemo.java:57: run() in Student cannot override run() in Person; attempting to assign weaker access privileges; was public
         int run(){
	57行: Student类中的run()不能覆盖Person类中的run(); 正在企图用分配一个更弱的访问权限; 以前是public
	
	
	Polymorphism.java:21: Fruit is abstract; cannot be instantiated
                juicer.run(new Fruit());
	21行: Fruit是抽象的, 不能被实例化(创建对象).
	
	
	Polymorphism.java:42: Fruit is not abstract and does not override abstract method squeeze() in Fruit
				class Fruit {
	42行: Fruit不是抽象的 并且 没有覆盖抽象方法squeeze()
	
	
	FinalDemo.java:15: cannot inherit from final A
			class B extends A {
	15行: 不能继承final的类A		
		
		
	FinalDemo.java:22: fun() in C cannot override fun() in B; overridden method is final
        void fun(){
	22行: C类的fun()不能覆盖B类的fun(); 被覆盖的方法是final的        
	
	
	FinalDemo.java:5: cannot assign a value to final variable x
                x = 98;
	5行: 不能分配一个值给final变量x
	
	
	Exception in thread "main" java.lang.NullPointerException
        at Person.shopping(ComboPattern.java:21)
        at ComboPattern.main(ComboPattern.java:5)
	21行: 空指针异常(就是某个点前面的对象为null), 21行是由第5行调用的.
一.Java基本语法
	1.代码的位置
		所有的Java代码都要写在一个class中
	2.大小写
		Java中严格区分大小写.
	3.自由格式
		Java代码分为结构定义语句和功能执行语句.
			例如: 定义类, 定义函数(方法), 定义循环, 定义条件分支这些都是结构定义语句. 定义变量, 给变量赋值, 打印, 这些都是功能执行语句
		一般结构定义语句后面会有一对大括号.
		功能执行语句都以分号结束.
	4.注释
		单行注释:	// 注释文本
		多行注释:	/* 注释文本 */
		文档注释:	/** 注释文本 */		文档注释可以通过javadoc命令生成帮助文档	
	5.标识符
		Java中的包名,类名,函数名,参数名,变量名这些都是标识符
		标识符可以由任意顺序的字母,数字,下划线(_)或美元符号($)组成, 但不能以数字开头, 不能是关键字(目前以是否高亮来区分)
		Java中的标识符都是以驼峰式命名
			类名第一个字母大写, 后面每个单词的首字母大写
			变量名, 方法名, 第一个字母小写, 后面每个单词首字母大写
		
二.Java中的常量
	1.整型
		int 占4个字节
	2.长整型
		long 占8个字节, 以L结尾
	3.浮点数
		float 占4个字节, 以F结尾
	4.双精度浮点数
		double 占8个字节
	5.布尔
		boolean 占1个字节
	6.字符
		char 占2个字节, 用单引号表示
		Java中的"\"是转义字符, 转义后面的一个字符, 通常用来表示一些不可见或有特殊意义的字符
		Java中特殊的字符: 
			\r 回车, 回到一行的首位
			\n 换行, 换到下一行
			一般\r\n是一起出现的, 在键盘上按下Enter键, 就相当于输入了\r\n
			\b 退格
			\t 制表符
			\\ 由于\是转义, 那么要显示一个的话, 就需要写两个
			\' 单引号
			\" 双引号
	7.字符串
		由若干个字符组成, 用双引号表示, 字符串大小不固定.
	8.空
		null, 表示什么也没有, 引用为空
		
* 三.变量(句柄,引用)
	1.变量定义
		类型 变量名 = 值;
		变量在被取值之前必须初始化, 否则会报错
	2.变量的类型
		* 基本数据类型
			byte		1字节
			short		2字节
			int			4字节
			long		8字节
			float		4字节
			double		8字节
			char		2字节
			boolean		1字节
		引用数据类型
			除了8中基本数据类型, 都是引用数据类型
	* 3.类型自动提升
		byte,short,char在参与运算之后, 会自动提升为int
	* 4.强制类型转换
		将一个占空间较大的值, 强制放入一个较小的空间, 有可能损失精度.
	5.字符串相加
		任何值与字符串相加都得字符串
	6.生命周期与作用域
		作用域: 从变量定义的位置向上找到第一个开始大括号, 这个大括号对应的范围就是变量的作用域.
		生命周期: 从定义变量开始, 到超出作用域时生命周期结束.
		
* 四.函数
	1.函数的定义需要三个部分
		返回值类型, 函数名, 参数列表
	2.返回值类型
		函数运行之后如果需要返回一个值, 在函数定义的时候就需要指定类型
		函数如果运行后没有返回值, 也要指定类型为void
	3.函数名
		函数的名字, 调用函数的时候使用.
	4.参数列表
		函数运行时需要的数据, 需要几个就写几个, 而且需要指定每一个的类型. 在调用函数的时候, 需要传入对应的参数.
	5.名词解释
		形参(形式参数), 在函数定义的时候, 小括号中定义的参数, 用来接受调用时传入的实参.
		实参(实际参数), 在调用函数时, 真正传入的参数.
		参数类型, 定义形参时指定的类型. 函数调用时传入的实参类型必须与形参类型匹配. 个数也要匹配
		返回值, 函数运行之后返回给调用者的值.
		返回值类型, 在定义函数的时候必须定义返回值的的类型, 如果函数不返回任何值, 也要定义类型为void
	6.函数的重载(Overload)
		函数名相同, 参数列表不同(个数不同, 类型不同, 顺序不同), 和返回值类型无关.
		
五.运算符
	* 1.算数运算符
		a)./ 除法, Java中的整数除法会向下取整
		b).% 取模, 5%2就是获得5除以2的余数. 模数的符号忽略不计, 结果的符号取决于被模数的符号
		c).++ 自增, 如果写在变量前++i的形式, 是先自增1, 再取值, 如果写在变量后i++的形式, 则是先取值后运算.
	* 2.赋值运算符, 给符号左边的变量赋值
		a). x += 2; 相当于 x = x + 2;
		b). x *= 2; 相当于 x = x * 2;
	* 3.比较运算符, 比较两边的值或表达式, 返回一个boolean值
		a).!= 不等于, 判断两边是否不相等, 如果不相等, 返回true, 相等则返回false
		b).== 判断两边是否相等, 如果相等则返回true, 否则返回false
	* 4.逻辑运算符
		a).& 与 and 并且, 符号两边都为true, 结果才为true, 只要有一边false, 结果就是false.
		b).| 或 or 或者, 符号两边只要有一边为true, 结果就为true, 如果两边都false, 结果才为false
		c).^ 异或 xor, 判断符号两边是否不同, 如果不同则反回true, 否则返回false
		d).! 非 not, 将后面的布尔值取反
		e).&& 与 and 并且, 符号两边都为true, 结果为true. 但具有短路功能. 如果符号前半为false, 则短路, 不运行后半.
		f).|| 或 or 或者, 符号两边都为false, 结果为false. 具有短路功能. 如果前半true, 则短路, 不运行后半.
	5.位运算符, 对二进制的每一位进行运算, 1当做true, 0当做false
		a).& 与 and, 0和1 &1都得自身
		b).| 或 or, 0和1 |0都得自身
		c).^ 异或 xor, 一个数异或另一个数两次还得自身
		d).>> 右移, 将二进制的每一位向右移动, 低位忽略, 高位以前是0就补0, 以前是1就补1.
		e).>>> 无符号右移, 将二进制的每一位向右移动, 低位忽略, 高位补0.
		f).<< 左移, 将二进制的每一位向左移动, 高位忽略, 低位补0.
		
创建cmd快捷方式
	找到c:\windows\system32\cmd.exe
	复制到常用的文件夹下
	拖到快速启动栏
	
报错:
	Test.java:5: x is already defined in main(java.lang.String[])
                int x = 99;
	第5行: x已经被定义, 在mian方法中
	
	
	Test.java:23: integer number too large: 2147483648
                int y = 2147483648;
	23行: 整型数字太长: 2147483648
    
                
	Variable.java:12: variable x might not have been initialized
                System.out.println(x);
	12行: 变量x没有被初始化
	
	
	Variable.java:23: possible loss of precision
	found   : int
	required: byte
	                byte b1 = b + 1;
	23行: 有可能损失精度
	找到int
	需要byte
	
	
	Method.java:25: unreachable statement
                print(200);
	25行: 不能读取到的代码                
	
	
	Method.java:27: getArea(int,int) in Method cannot be applied to (double,boolean)
                getArea(3.14, true);
	27行: getArea(int,int)在Method类中不能被应用程(double,boolean)
	
	
	Operator3.java:25: cannot find symbol
	symbol  : variable y
	location: class Operator3
	                System.out.println(!(x > y));
	25行: 找不到符号
	符号: 变量y
	位置: 类Operator3